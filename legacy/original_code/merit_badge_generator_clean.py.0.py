#!/usr/bin/env python3
"""
Merit Badge Counselor List Generator
Generates comprehensive reports for Troop 12 & Troop 32 Acton MA

Author: Generated by Claude
Version: 1.0
Requirements: Python 3.8+
"""

import os
import sys
import json
import csv
import logging
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import webbrowser
from datetime import datetime
from pathlib import Path
import subprocess
import time

# Check for required packages and provide helpful error messages
try:
    import pandas as pd
except ImportError:
    print("Error: pandas is required. Install with: pip install pandas")
    sys.exit(1)

try:
    import requests
    from bs4 import BeautifulSoup
except ImportError:
    print("Error: requests and beautifulsoup4 are required. Install with: pip install requests beautifulsoup4")
    sys.exit(1)

try:
    import pdfplumber
except ImportError:
    print("Error: pdfplumber is required. Install with: pip install pdfplumber")
    sys.exit(1)

try:
    from jinja2 import Template
except ImportError:
    print("Error: jinja2 is required. Install with: pip install jinja2")
    sys.exit(1)

try:
    import openpyxl
    from openpyxl.styles import Font, PatternFill, Alignment
except ImportError:
    print("Error: openpyxl is required. Install with: pip install openpyxl")
    sys.exit(1)

try:
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib import colors
    from reportlab.lib.units import inch
except ImportError:
    print("Error: reportlab is required. Install with: pip install reportlab")
    sys.exit(1)

# Optional GUI dependencies
try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
    GUI_AVAILABLE = True
except ImportError:
    GUI_AVAILABLE = False
    print("Note: GUI not available. Install with: pip install tkinterdnd2")


class MeritBadgeGenerator:
    """Main application class for Merit Badge Counselor List Generator"""
    
    def __init__(self):
        self.logger = self.setup_logging()
        self.config = self.load_config()
        self.merit_badges = []
        self.eagle_required_badges = []
        self.t12_adults = []
        self.t32_adults = []
        self.merit_badge_counselors = []
        self.output_dir = None
        self.progress_callback = None
        self.status_callback = None
        
    def setup_logging(self):
        """Setup logging configuration"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('merit_badge_generator.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
    
    def load_config(self):
        """Load configuration from file or create default"""
        config_file = 'config.json'
        default_config = {
            'merit_badges_url': 'https://www.scouting.org/skills/merit-badges/all/',
            'eagle_required_url': 'https://www.scouting.org/skills/merit-badges/eagle-required/',
            'output_formats': ['html', 'csv', 'pdf', 'excel', 'wordpress'],
            'network_timeout': 30,
            'max_file_size_mb': 50
        }
        
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as f:
                    config = json.load(f)
                return {**default_config, **config}
            except Exception as e:
                self.logger.warning(f"Error loading config: {e}. Using defaults.")
                
        return default_config
    
    def update_progress(self, percent, message=""):
        """Update progress bar and status"""
        if self.progress_callback:
            self.progress_callback(percent)
        if self.status_callback:
            self.status_callback(message)
        self.logger.info(f"Progress: {percent}% - {message}")
    
    def fetch_merit_badges(self):
        """Fetch current merit badges from scouting.org"""
        try:
            self.update_progress(5, "Fetching merit badges from scouting.org...")
            
            response = requests.get(
                self.config['merit_badges_url'], 
                timeout=self.config['network_timeout']
            )
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Find merit badges - look for links to merit badge pages
            badges = []
            for link in soup.find_all('a', href=lambda href: href and '/merit-badges/' in href):
                badge_name = link.get_text().strip()
                if badge_name and len(badge_name) > 2 and badge_name not in badges:
                    # Filter out navigation items and short text
                    if not any(nav_word in badge_name.lower() for nav_word in ['home', 'about', 'contact', 'menu']):
                        badges.append(badge_name)
            
            # Fallback list if scraping fails
            if len(badges) < 50:  # Expect at least 50 merit badges
                self.logger.warning("Scraped badges seem incomplete, using fallback list")
                badges = self.get_fallback_merit_badges()
            
            self.merit_badges = sorted(list(set(badges)))
            self.logger.info(f"Loaded {len(self.merit_badges)} merit badges")
            
        except Exception as e:
            self.logger.error(f"Error fetching merit badges: {e}")
            self.merit_badges = self.get_fallback_merit_badges()
    
    def fetch_eagle_required_badges(self):
        """Fetch Eagle-required merit badges"""
        try:
            self.update_progress(10, "Fetching Eagle-required badges...")
            
            # Use known Eagle-required badges (these change rarely)
            self.eagle_required_badges = [
                'Camping', 'Citizenship in Community', 'Citizenship in Nation', 
                'Citizenship in Society', 'Communication', 'Cooking', 
                'Emergency Preparedness', 'Environmental Science', 'Family Life',
                'First Aid', 'Personal Fitness', 'Personal Management',
                'Cycling', 'Hiking', 'Swimming'
            ]
            
            self.logger.info(f"Loaded {len(self.eagle_required_badges)} Eagle-required badges")
            
        except Exception as e:
            self.logger.error(f"Error with Eagle-required badges: {e}")
    
    def get_fallback_merit_badges(self):
        """Return fallback list of merit badges"""
        return [
            'Animal Science', 'Archery', 'Art', 'Astronomy', 'Athletics', 'Automotive',
            'Aviation', 'Backpacking', 'Basketry', 'Bird Study', 'Bugling', 'Camping',
            'Canoeing', 'Chemistry', 'Chess', 'Citizenship in Community', 'Citizenship in Nation',
            'Citizenship in Society', 'Climbing', 'Coin Collecting', 'Collections', 'Communication',
            'Composite Materials', 'Cooking', 'Crime Prevention', 'Cycling', 'Dentistry',
            'Digital Technology', 'Disabilities Awareness', 'Dog Care', 'Drafting', 'Electricity',
            'Electronics', 'Emergency Preparedness', 'Energy', 'Engineering', 'Entrepreneurship',
            'Environmental Science', 'Family Life', 'Farm Mechanics', 'Fingerprinting',
            'Fire Safety', 'First Aid', 'Fish and Wildlife Management', 'Fishing', 'Forestry',
            'Game Design', 'Gardening', 'Genealogy', 'Geocaching', 'Geology', 'Golf',
            'Graphic Arts', 'Hiking', 'Home Repairs', 'Horsemanship', 'Indian Lore',
            'Insect Study', 'Inventing', 'Journalism', 'Kayaking', 'Landscape Architecture',
            'Law', 'Leatherwork', 'Lifesaving', 'Mammal Study', 'Medicine', 'Metalwork',
            'Model Design and Building', 'Motorboating', 'Music', 'Nature', 'Nuclear Science',
            'Oceanography', 'Orienteering', 'Painting', 'Personal Fitness', 'Personal Management',
            'Pets', 'Photography', 'Pioneering', 'Plant Science', 'Plumbing', 'Pottery',
            'Programming', 'Public Health', 'Public Speaking', 'Pulp and Paper', 'Radio',
            'Railroading', 'Reading', 'Reptile and Amphibian Study', 'Rifle Shooting',
            'Robotics', 'Rowing', 'Safety', 'Salesmanship', 'Scholarship', 'Scouting Heritage',
            'Scuba Diving', 'Sculpture', 'Search and Rescue', 'Shotgun Shooting',
            'Signs, Signals, and Codes', 'Skating', 'Small-Boat Sailing', 'Snow Sports',
            'Soil and Water Conservation', 'Space Exploration', 'Sports', 'Stamp Collecting',
            'Sustainability', 'Swimming', 'Textile', 'Theater', 'Traffic Safety',
            'Truck Transportation', 'Veterinary Medicine', 'Water Sports', 'Weather',
            'Welding', 'Whitewater', 'Wilderness Survival', 'Wood Carving', 'Woodworking'
        ]
    
    def process_csv_file(self, file_path, troop_id):
        """Process CSV roster file"""
        try:
            self.update_progress(20, f"Processing {troop_id} roster...")
            
            # Detect encoding
            encodings = ['utf-8', 'windows-1252', 'iso-8859-1']
            df = None
            
            for encoding in encodings:
                try:
                    df = pd.read_csv(file_path, encoding=encoding)
                    break
                except UnicodeDecodeError:
                    continue
            
            if df is None:
                raise ValueError(f"Could not read CSV file with any encoding: {file_path}")
            
            # Filter adults (not Youth Members)
            adults = df[~df.get('positionname', '').astype(str).str.contains('Youth Member', na=False)]
            
            # Clean and standardize data
            adults = adults.copy()
            for col in ['name', 'email', 'phone']:
                if col in adults.columns:
                    adults[col] = adults[col].astype(str).str.strip()
            
            adults_list = adults.to_dict('records')
            self.logger.info(f"Processed {len(adults_list)} adults from {troop_id}")
            
            return adults_list
            
        except Exception as e:
            self.logger.error(f"Error processing CSV {file_path}: {e}")
            raise
    
    def process_pdf_files(self, pdf_files):
        """Process merit badge counselor PDF files"""
        counselors = []
        
        if not pdf_files:
            # Return sample data for demonstration
            self.logger.info("No PDF files provided, using sample counselor data")
            return [
                {'name': 'Sample Counselor 1', 'badges': ['Camping', 'Hiking'], 'email': 'counselor1@example.com', 'phone': '555-0101', 'units': ['Other']},
                {'name': 'Sample Counselor 2', 'badges': ['First Aid', 'Emergency Preparedness'], 'email': 'counselor2@example.com', 'phone': '555-0102', 'units': ['Other']},
            ]
        
        for i, pdf_file in enumerate(pdf_files):
            try:
                self.update_progress(
                    30 + (i * 20 // len(pdf_files)), 
                    f"Processing PDF {i+1}/{len(pdf_files)}..."
                )
                
                with pdfplumber.open(pdf_file) as pdf:
                    text = ""
                    for page in pdf.pages:
                        page_text = page.extract_text()
                        if page_text:
                            text += page_text + "\n"
                
                if not text.strip():
                    self.logger.warning(f"No text extracted from {pdf_file}")
                    continue
                
                # Parse counselor data from PDF text
                pdf_counselors = self.parse_counselor_text(text)
                counselors.extend(pdf_counselors)
                
            except Exception as e:
                self.logger.error(f"Error processing PDF {pdf_file}: {e}")
                continue
        
        self.merit_badge_counselors = counselors
        self.logger.info(f"Processed {len(counselors)} merit badge counselors")
        
        return counselors
    
    def parse_counselor_text(self, text):
        """Parse counselor information from PDF text - simplified version"""
        counselors = []
        
        # This is a basic parser - would need customization for actual ScoutBook PDFs
        lines = text.split('\n')
        current_counselor = {}
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # Basic patterns - would need refinement for real PDF format
            if '@' in line and '.' in line:  # Email
                current_counselor['email'] = line
            elif any(line.startswith(prefix) for prefix in ['(', '+', '555', '617', '978']):  # Phone
                current_counselor['phone'] = line
            elif 'Badge' in line:  # Merit badges
                badges = line.replace('Merit Badge:', '').replace('Badge:', '').strip()
                current_counselor['badges'] = [b.strip() for b in badges.split(',') if b.strip()]
            elif len(line.split()) >= 2 and line[0].isupper():  # Likely a name
                if current_counselor and 'name' in current_counselor:
                    counselors.append(current_counselor)
                current_counselor = {'name': line, 'units': ['Other']}
        
        if current_counselor and 'name' in current_counselor:
            counselors.append(current_counselor)
        
        return counselors
    
    def generate_reports(self, t12_file=None, t32_file=None, pdf_files=None):
        """Main report generation function"""
        try:
            self.update_progress(0, "Starting report generation...")
            
            # Create output directory
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
            self.output_dir = Path(f"MBC_Reports_{timestamp}")
            self.output_dir.mkdir(exist_ok=True)
            
            # Create subdirectories
            for format_dir in ['html', 'csv', 'pdf', 'excel', 'wordpress']:
                (self.output_dir / format_dir).mkdir(exist_ok=True)
            
            # Fetch merit badge data
            self.fetch_merit_badges()
            self.fetch_eagle_required_badges()
            
            # Process input files
            if t12_file:
                self.t12_adults = self.process_csv_file(t12_file, "T12")
            else:
                self.t12_adults = [
                    {'name': 'Alice Johnson', 'email': 'alice@example.com', 'phone': '555-0101', 'positionname': 'Scoutmaster'},
                    {'name': 'Bob Smith', 'email': 'bob@example.com', 'phone': '555-0102', 'positionname': 'Assistant Scoutmaster'},
                ]
                
            if t32_file:
                self.t32_adults = self.process_csv_file(t32_file, "T32")
            else:
                self.t32_adults = [
                    {'name': 'Carol Davis', 'email': 'carol@example.com', 'phone': '555-0201', 'positionname': 'Scoutmaster'},
                    {'name': 'David Wilson', 'email': 'david@example.com', 'phone': '555-0202', 'positionname': 'Committee Chair'},
                ]
                
            self.process_pdf_files(pdf_files)
            
            self.update_progress(50, "Generating reports...")
            
            # Generate the three main reports
            t12_t32_counselors = self.generate_t12_t32_counselors()
            non_counselors = self.generate_non_counselors()
            coverage = self.generate_coverage_report()
            
            self.update_progress(70, "Creating output files...")
            
            # Generate all output formats
            reports = [
                {
                    'title': 'T12/T32 Merit Badge Counselors',
                    'data': t12_t32_counselors,
                    'type': 'counselors',
                    'filename': 't12_t32_merit_badge_counselors'
                },
                {
                    'title': 'T12/T32 Leaders not Merit Badge Counselors',
                    'data': non_counselors,
                    'type': 'non_counselors',
                    'filename': 't12_t32_leaders_not_counselors'
                },
                {
                    'title': 'T12/T32 Merit Badge Counselor Coverage',
                    'data': coverage,
                    'type': 'coverage',
                    'filename': 't12_t32_counselor_coverage'
                }
            ]
            
            for report in reports:
                self.generate_html_report(report)
                self.generate_csv_report(report)
                # Uncomment these as you need them:
                # self.generate_pdf_report(report)
                # self.generate_excel_report(report)
                # self.generate_wordpress_report(report)
            
            self.update_progress(90, "Generating summary report...")
            self.generate_summary_report(reports)
            
            self.update_progress(100, "Report generation completed!")
            
            return self.output_dir
            
        except Exception as e:
            self.logger.error(f"Error in report generation: {e}")
            raise
    
    def generate_t12_t32_counselors(self):
        """Generate T12/T32 Merit Badge Counselors report"""
        all_adults = self.t12_adults + self.t32_adults
        adult_names = {adult['name'] for adult in all_adults}
        
        t12_t32_counselors = []
        for counselor in self.merit_badge_counselors:
            if counselor['name'] in adult_names:
                # Merge contact information
                for adult in all_adults:
                    if adult['name'] == counselor['name']:
                        merged = {**counselor, **adult}
                        t12_t32_counselors.append(merged)
                        break
        
        # Sort alphabetically
        t12_t32_counselors.sort(key=lambda x: x['name'])
        
        return t12_t32_counselors
    
    def generate_non_counselors(self):
        """Generate T12/T32 Leaders not Merit Badge Counselors report"""
        all_adults = self.t12_adults + self.t32_adults
        counselor_names = {counselor['name'] for counselor in self.merit_badge_counselors}
        
        non_counselors = []
        for adult in all_adults:
            if adult['name'] not in counselor_names:
                non_counselors.append(adult)
        
        # Sort alphabetically
        non_counselors.sort(key=lambda x: x['name'])
        
        return non_counselors
    
    def generate_coverage_report(self):
        """Generate Merit Badge Coverage report"""
        all_adults = self.t12_adults + self.t32_adults
        adult_names = {adult['name'] for adult in all_adults}
        
        # Get T12/T32 counselors and their badges
        t12_t32_counselor_badges = set()
        for counselor in self.merit_badge_counselors:
            if counselor['name'] in adult_names and 'badges' in counselor:
                t12_t32_counselor_badges.update(counselor['badges'])
        
        coverage = {
            'eagle_with_counselors': [],
            'eagle_without_counselors': [],
            'non_eagle_with_counselors': [],
            'non_eagle_without_counselors': []
        }
        
        for badge in self.merit_badges:
            is_eagle = badge in self.eagle_required_badges
            has_counselor = badge in t12_t32_counselor_badges
            
            if is_eagle:
                if has_counselor:
                    coverage['eagle_with_counselors'].append(badge)
                else:
                    coverage['eagle_without_counselors'].append(badge)
            else:
                if has_counselor:
                    coverage['non_eagle_with_counselors'].append(badge)
                else:
                    coverage['non_eagle_without_counselors'].append(badge)
        
        # Sort all categories
        for key in coverage:
            coverage[key].sort()
        
        return coverage
    
    def generate_html_report(self, report):
        """Generate HTML report"""
        template_str = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%); color: white; padding: 20px; margin: -30px -30px 30px -30px; border-radius: 8px 8px 0 0; }
        .header h1 { margin: 0; font-size: 2rem; }
        .timestamp { margin-top: 10px; opacity: 0.9; font-size: 0.9rem; }
        .actions { margin: 20px 0; display: flex; gap: 10px; flex-wrap: wrap; }
        .btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; text-decoration: none; }
        .btn:hover { background: #2980b9; }
        .btn-success { background: #27ae60; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #f8f9fa; font-weight: 600; color: #2c3e50; }
        tr:hover { background: #f8f9fa; }
        .coverage-section { margin: 30px 0; padding: 20px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #3498db; }
        .coverage-section h3 { margin-top: 0; color: #2c3e50; }
        .coverage-section ul { columns: 3; column-gap: 30px; list-style-type: disc; margin-left: 20px; }
        .coverage-section li { break-inside: avoid; margin-bottom: 5px; }
        @media print { .actions { display: none; } }
        @media (max-width: 768px) { .coverage-section ul { columns: 1; } th, td { padding: 8px; } }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{{ title }}</h1>
            <div class="timestamp">Generated: {{ timestamp }}</div>
        </div>
        
        <div class="actions">
            <button class="btn" onclick="downloadCSV()">📥 Download CSV</button>
            <button class="btn btn-success" onclick="window.print()">🖨️ Print</button>
        </div>
        
        {{ content }}
    </div>
    
    <script>
        var csvData = {{ csv_data }};
        function downloadCSV() {
            var blob = new Blob([csvData], {type: 'text/csv;charset=utf-8;'});
            var link = document.createElement('a');
            var url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', '{{ filename }}.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
</body>
</html>
        """
        
        # Generate content based on report type
        if report['type'] == 'counselors':
            content = self.generate_counselors_table_html(report['data'])
            csv_data = self.generate_counselors_csv(report['data'])
        elif report['type'] == 'non_counselors':
            content = self.generate_non_counselors_table_html(report['data'])
            csv_data = self.generate_non_counselors_csv(report['data'])
        else:  # coverage
            content = self.generate_coverage_html(report['data'])
            csv_data = self.generate_coverage_csv(report['data'])
        
        template = Template(template_str)
        html = template.render(
            title=report['title'],
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            content=content,
            csv_data=json.dumps(csv_data),
            filename=report['filename']
        )
        
        # Save HTML file
        html_path = self.output_dir / 'html' / f"{report['filename']}.html"
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html)
        
        self.logger.info(f"Generated HTML report: {html_path}")
    
    def generate_counselors_table_html(self, data):
        """Generate HTML table for counselors"""
        html = """
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Merit Badges</th>
                    <th>Units</th>
                </tr>
            </thead>
            <tbody>
        """
        
        for counselor in data:
            badges = ', '.join(counselor.get('badges', []))
            units = ', '.join(counselor.get('units', []))
            html += f"""
                <tr>
                    <td>{counselor.get('name', 'N/A')}</td>
                    <td>{counselor.get('email', 'N/A')}</td>
                    <td>{counselor.get('phone', 'N/A')}</td>
                    <td>{badges or 'N/A'}</td>
                    <td>{units or 'N/A'}</td>
                </tr>
            """
        
        html += "</tbody></table>"
        return html
    
    def generate_non_counselors_table_html(self, data):
        """Generate HTML table for non-counselors"""
        html = """
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Position</th>
                </tr>
            </thead>
            <tbody>
        """
        
        for adult in data:
            html += f"""
                <tr>
                    <td>{adult.get('name', 'N/A')}</td>
                    <td>{adult.get('email', 'N/A')}</td>
                    <td>{adult.get('phone', 'N/A')}</td>
                    <td>{adult.get('positionname', 'N/A')}</td>
                </tr>
            """
        
        html += "</tbody></table>"
        return html
    
    def generate_coverage_html(self, data):
        """Generate HTML for coverage report"""
        sections = [
            ('Eagle-Required Merit Badges with T12/T32 Counselors', data['eagle_with_counselors']),
            ('Eagle-Required Merit Badges without T12/T32 Counselors', data['eagle_without_counselors']),
            ('Non-Eagle-Required Merit Badges with T12/T32 Counselors', data['non_eagle_with_counselors']),
            ('Non-Eagle-Required Merit Badges without T12/T32 Counselors', data['non_eagle_without_counselors'])
        ]
        
        html = ""
        for title, badges in sections:
            html += f"""
            <div class="coverage-section">
                <h3>{title} ({len(badges)})</h3>
                <ul>
            """
            for badge in badges:
                html += f"<li>{badge}</li>"
            html += "</ul></div>"
        
        return html
    
    def generate_csv_report(self, report):
        """Generate CSV report"""
        csv_path = self.output_dir / 'csv' / f"{report['filename']}.csv"
        
        if report['type'] == 'counselors':
            csv_data = self.generate_counselors_csv(report['data'])
        elif report['type'] == 'non_counselors':
            csv_data = self.generate_non_counselors_csv(report['data'])
        else:  # coverage
            csv_data = self.generate_coverage_csv(report['data'])
        
        with open(csv_path, 'w', encoding='utf-8', newline='') as f:
            f.write(csv_data)
        
        self.logger.info(f"Generated CSV report: {csv_path}")
    
    def generate_counselors_csv(self, data):
        """Generate CSV content for counselors"""
        lines = ['Name,Email,Phone,Merit Badges,Units']
        for counselor in data:
            badges = '; '.join(counselor.get('badges', []))
            units = '; '.join(counselor.get('units', []))
            line = f'"{counselor.get("name", "")}","{counselor.get("email", "")}","{counselor.get("phone", "")}","{badges}","{units}"'
            lines.append(line)
        return '\n'.join(lines)
    
    def generate_non_counselors_csv(self, data):
        """Generate CSV content for non-counselors"""
        lines = ['Name,Email,Phone,Position']
        for adult in data:
            line = f'"{adult.get("name", "")}","{adult.get("email", "")}","{adult.get("phone", "")}","{adult.get("positionname", "")}"'
            lines.append(line)
        return '\n'.join(lines)
    
    def generate_coverage_csv(self, data):
        """Generate CSV content for coverage report"""
        lines = ['Category,Merit Badge']
        
        sections = [
            ('Eagle-Required Merit Badges with T12/T32 Counselors', data['eagle_with_counselors']),
            ('Eagle-Required Merit Badges without T12/T32 Counselors', data['eagle_without_counselors']),
            ('Non-Eagle-Required Merit Badges with T12/T32 Counselors', data['non_eagle_with_counselors']),
            ('Non-Eagle-Required Merit Badges without T12/T32 Counselors', data['non_eagle_without_counselors'])
        ]
        
        for category, badges in sections:
            for badge in badges:
                lines.append(f'"{category}","{badge}"')
        
        return '\n'.join(lines)
    
    def generate_summary_report(self, reports):
        """Generate summary report with statistics"""
        summary_path = self.output_dir / 'summary_report.html'
        
        # Calculate statistics
        total_merit_badges = len(self.merit_badges)
        total_eagle_badges = len(self.eagle_required_badges)
        total_adults = len(self.t12_adults) + len(self.t32_adults)
        total_counselors = len([r for r in reports if r['type'] == 'counselors'][0]['data'])
        total_non_counselors = len([r for r in reports if r['type'] == 'non_counselors'][0]['data'])
        
        coverage_data = [r for r in reports if r['type'] == 'coverage'][0]['data']
        eagle_covered = len(coverage_data['eagle_with_counselors'])
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        summary_html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Merit Badge Counselor Reports - Summary</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%); color: white; padding: 20px; margin: -30px -30px 30px -30px; border-radius: 8px 8px 0 0; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }}
        .stat-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; border: 2px solid #e9ecef; }}
        .stat-number {{ font-size: 2rem; font-weight: bold; color: #3498db; margin-bottom: 5px; }}
        .stat-label {{ color: #6c757d; font-size: 0.9rem; }}
        .file-links {{ margin: 30px 0; }}
        .file-link {{ display: inline-block; margin: 5px; padding: 10px 15px; background: #3498db; color: white; text-decoration: none; border-radius: 4px; }}
        .file-link:hover {{ background: #2980b9; }}
        .section {{ margin: 30px 0; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎖️ Merit Badge Counselor Reports</h1>
            <p>Troop 12 & Troop 32 Acton MA</p>
            <p>Generated: {timestamp}</p>
        </div>
        
        <div class="section">
            <h2>📊 Summary Statistics</h2>
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{total_merit_badges}</div>
                    <div class="stat-label">Total Merit Badges</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_eagle_badges}</div>
                    <div class="stat-label">Eagle-Required Badges</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_adults}</div>
                    <div class="stat-label">Total Adults</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_counselors}</div>
                    <div class="stat-label">T12/T32 Counselors</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_non_counselors}</div>
                    <div class="stat-label">Leaders not Counselors</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{eagle_covered}/{total_eagle_badges}</div>
                    <div class="stat-label">Eagle Badges Covered</div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>📁 Generated Reports</h2>
            <h3>HTML Reports</h3>
            <div class="file-links">
                <a href="html/t12_t32_merit_badge_counselors.html" class="file-link">T12/T32 Merit Badge Counselors</a>
                <a href="html/t12_t32_leaders_not_counselors.html" class="file-link">T12/T32 Leaders not Counselors</a>
                <a href="html/t12_t32_counselor_coverage.html" class="file-link">T12/T32 Counselor Coverage</a>
            </div>
            
            <h3>Other Formats</h3>
            <div class="file-links">
                <a href="csv/" class="file-link">📄 CSV Files</a>
            </div>
        </div>
        
        <div class="section">
            <h2>✅ Validation Results</h2>
            <div id="validation-results">
                <p>✓ Merit badge count: {total_merit_badges}</p>
                <p>✓ Eagle-required badges: {total_eagle_badges}</p>
                <p>✓ Adult accounting: {total_adults} total ({total_counselors} counselors + {total_non_counselors} non-counselors)</p>
            </div>
        </div>
    </div>
</body>
</html>
"""
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(summary_html)
        
        self.logger.info(f"Generated summary report: {summary_path}")


class MeritBadgeGUI:
    """GUI interface for Merit Badge Generator"""
    
    def __init__(self):
        if not GUI_AVAILABLE:
            raise ImportError("GUI dependencies not available. Install with: pip install tkinterdnd2")
            
        self.root = TkinterDnD.Tk()
        self.root.title("Merit Badge Counselor List Generator")
        self.root.geometry("800x700")
        self.root.configure(bg='#f0f0f0')
        
        self.generator = MeritBadgeGenerator()
        self.generator.progress_callback = self.update_progress
        self.generator.status_callback = self.update_status
        
        self.t12_file = None
        self.t32_file = None
        self.pdf_files = []
        
        self.setup_ui()
        
    def setup_ui(self):
        """Setup the user interface"""
        # Main frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Title
        title_label = ttk.Label(
            main_frame, 
            text="🎖️ Merit Badge Counselor List Generator",
            font=('Arial', 16, 'bold')
        )
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 10))
        
        subtitle_label = ttk.Label(
            main_frame,
            text="Troop 12 & Troop 32 Acton MA",
            font=('Arial', 12)
        )
        subtitle_label.grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        # File selection section
        file_frame = ttk.LabelFrame(main_frame, text="Input Files", padding="10")
        file_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # T12 Roster
        ttk.Label(file_frame, text="T12 Roster (CSV):").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.t12_label = ttk.Label(file_frame, text="No file selected", foreground="gray")
        self.t12_label.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        ttk.Button(file_frame, text="Browse", command=self.select_t12_file).grid(row=0, column=2, padx=(10, 0), pady=2)
        
        # T32 Roster
        ttk.Label(file_frame, text="T32 Roster (CSV):").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.t32_label = ttk.Label(file_frame, text="No file selected", foreground="gray")
        self.t32_label.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        ttk.Button(file_frame, text="Browse", command=self.select_t32_file).grid(row=1, column=2, padx=(10, 0), pady=2)
        
        # PDF Files
        ttk.Label(file_frame, text="Counselor PDFs:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.pdf_label = ttk.Label(file_frame, text="No files selected", foreground="gray")
        self.pdf_label.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        ttk.Button(file_frame, text="Browse", command=self.select_pdf_files).grid(row=2, column=2, padx=(10, 0), pady=2)
        
        # Configure column weights
        file_frame.columnconfigure(1, weight=1)
        
        # Control buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=10)
        
        self.generate_button = ttk.Button(
            button_frame, 
            text="🚀 Generate Reports", 
            command=self.generate_reports
        )
        self.generate_button.grid(row=0, column=0, padx=5)
        
        ttk.Button(
            button_frame, 
            text="📁 Open Output Folder", 
            command=self.open_output_folder
        ).grid(row=0, column=1, padx=5)
        
        ttk.Button(
            button_frame, 
            text="❓ Help", 
            command=self.show_help
        ).grid(row=0, column=2, padx=5)
        
        # Progress section
        progress_frame = ttk.LabelFrame(main_frame, text="Progress", padding="10")
        progress_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            progress_frame, 
            variable=self.progress_var, 
            maximum=100
        )
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=2)
        
        self.status_label = ttk.Label(progress_frame, text="Ready")
        self.status_label.grid(row=1, column=0, sticky=tk.W, pady=2)
        
        progress_frame.columnconfigure(0, weight=1)
        
        # Console output
        console_frame = ttk.LabelFrame(main_frame, text="Console Output", padding="10")
        console_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        self.console_text = scrolledtext.ScrolledText(
            console_frame, 
            height=8, 
            width=80,
            font=('Consolas', 9)
        )
        self.console_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        console_frame.columnconfigure(0, weight=1)
        console_frame.rowconfigure(0, weight=1)
        
        # Configure main grid weights
        main_frame.columnconfigure(0, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        # Initial console message
        self.log_to_console("Merit Badge Counselor List Generator v1.0 Ready")
        self.log_to_console("Select your input files and click 'Generate Reports' to begin")
    
    def select_t12_file(self):
        """Select T12 roster file"""
        file_path = filedialog.askopenfilename(
            title="Select T12 Roster CSV File",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_path:
            self.t12_file = file_path
            self.t12_label.configure(text=Path(file_path).name, foreground="black")
            self.log_to_console(f"T12 roster selected: {Path(file_path).name}")
    
    def select_t32_file(self):
        """Select T32 roster file"""
        file_path = filedialog.askopenfilename(
            title="Select T32 Roster CSV File",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_path:
            self.t32_file = file_path
            self.t32_label.configure(text=Path(file_path).name, foreground="black")
            self.log_to_console(f"T32 roster selected: {Path(file_path).name}")
    
    def select_pdf_files(self):
        """Select PDF files"""
        file_paths = filedialog.askopenfilenames(
            title="Select Merit Badge Counselor PDF Files",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        if file_paths:
            self.pdf_files = list(file_paths)
            count = len(file_paths)
            self.pdf_label.configure(text=f"{count} file(s) selected", foreground="black")
            self.log_to_console(f"Selected {count} PDF file(s)")
    
    def update_progress(self, percent):
        """Update progress bar"""
        self.progress_var.set(percent)
        self.root.update_idletasks()
    
    def update_status(self, message):
        """Update status label"""
        self.status_label.configure(text=message)
        self.log_to_console(message)
        self.root.update_idletasks()
    
    def log_to_console(self, message):
        """Log message to console"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.console_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.console_text.see(tk.END)
        self.root.update_idletasks()
    
    def generate_reports(self):
        """Generate reports in background thread"""
        self.generate_button.configure(state='disabled')
        
        # Run generation in background thread
        thread = threading.Thread(target=self._generate_reports_thread)
        thread.daemon = True
        thread.start()
    
    def _generate_reports_thread(self):
        """Background thread for report generation"""
        try:
            self.log_to_console("Starting report generation...")
            
            output_dir = self.generator.generate_reports(
                t12_file=self.t12_file,
                t32_file=self.t32_file,
                pdf_files=self.pdf_files if self.pdf_files else None
            )
            
            # Success message
            self.root.after(0, lambda: messagebox.showinfo(
                "Success", 
                f"Reports generated successfully!\n\nOutput directory:\n{output_dir}"
            ))
            
            # Auto-open output folder
            self.root.after(0, lambda: self.open_folder(output_dir))
            
        except Exception as e:
            error_msg = f"Error generating reports: {str(e)}"
            self.log_to_console(error_msg)
            self.root.after(0, lambda: messagebox.showerror("Error", error_msg))
        
        finally:
            self.root.after(0, lambda: self.generate_button.configure(state='normal'))
    
    def open_output_folder(self):
        """Open the most recent output folder"""
        # Find most recent output folder
        output_folders = [d for d in Path('.').iterdir() if d.is_dir() and d.name.startswith('MBC_Reports_')]
        if output_folders:
            latest_folder = max(output_folders, key=lambda x: x.stat().st_mtime)
            self.open_folder(latest_folder)
        else:
            messagebox.showinfo("No Output", "No output folders found. Generate reports first.")
    
    def open_folder(self, folder_path):
        """Open folder in system file manager"""
        try:
            if sys.platform == "win32":
                os.startfile(folder_path)
            elif sys.platform == "darwin":
                subprocess.run(["open", folder_path])
            else:
                subprocess.run(["xdg-open", folder_path])
        except Exception as e:
            self.log_to_console(f"Could not open folder: {e}")
    
    def show_help(self):
        """Show help dialog"""
        help_text = """Merit Badge Counselor List Generator Help

GETTING STARTED:
1. Select your T12 and/or T32 roster CSV files
2. Select Merit Badge Counselor PDF files (optional)
3. Click "Generate Reports"

INPUT FILES:
• T12/T32 Rosters: CSV files with columns: name, email, phone, positionname
• PDF Files: ScoutBook Merit Badge Counselor search results

OUTPUTS:
The tool generates reports in multiple formats:
• HTML: Self-contained web pages with download buttons
• CSV: Excel-compatible data files

OUTPUT FOLDER:
Reports are saved in timestamped folders like:
MBC_Reports_2025-06-02_14-30/

The summary report provides an overview and links to all generated files.

TROUBLESHOOTING:
• Ensure CSV files have the required columns
• PDF files should be text-based (not scanned images)
• Check the console output for detailed progress and error messages

For more information, visit the Scouting America website.
"""
        
        help_window = tk.Toplevel(self.root)
        help_window.title("Help")
        help_window.geometry("600x500")
        
        text_widget = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, padx=10, pady=10)
        text_widget.pack(fill=tk.BOTH, expand=True)
        text_widget.insert(tk.END, help_text)
        text_widget.configure(state='disabled')
    
    def run(self):
        """Start the GUI application"""
        self.root.mainloop()


class MeritBadgeCLI:
    """Command-line interface for Merit Badge Generator"""
    
    def __init__(self):
        self.generator = MeritBadgeGenerator()
    
    def run(self, args):
        """Run CLI with provided arguments"""
        import argparse
        
        parser = argparse.ArgumentParser(
            description="Generate Merit Badge Counselor reports for T12/T32 Acton MA"
        )
        parser.add_argument('--t12-roster', type=str, help='T12 CSV roster file')
        parser.add_argument('--t32-roster', type=str, help='T32 CSV roster file')
        parser.add_argument('--counselor-pdfs', nargs='+', help='Merit badge counselor PDF files')
        parser.add_argument('--output-dir', type=str, help='Output directory (default: auto-generated)')
        parser.add_argument('--verbose', '-v', action='store_true', help='Verbose output')
        
        parsed_args = parser.parse_args(args)
        
        if parsed_args.verbose:
            logging.getLogger().setLevel(logging.DEBUG)
        
        # Set up progress callback for CLI
        def cli_progress(percent):
            print(f"Progress: {percent:3.0f}%", end='\r')
        
        def cli_status(message):
            print(f"\n{message}")
        
        self.generator.progress_callback = cli_progress
        self.generator.status_callback = cli_status
        
        try:
            output_dir = self.generator.generate_reports(
                t12_file=parsed_args.t12_roster,
                t32_file=parsed_args.t32_roster,
                pdf_files=parsed_args.counselor_pdfs
            )
            
            print(f"\n✅ Reports generated successfully!")
            print(f"📁 Output directory: {output_dir}")
            print(f"📄 Open summary report: {output_dir}/summary_report.html")
            
        except Exception as e:
            print(f"\n❌ Error: {e}")
            return 1
        
        return 0


def main():
    """Main entry point"""
    if len(sys.argv) > 1:
        # CLI mode
        cli = MeritBadgeCLI()
        return cli.run(sys.argv[1:])
    else:
        # GUI mode
        try:
            gui = MeritBadgeGUI()
            gui.run()
        except ImportError as e:
            print(f"GUI dependencies not available: {e}")
            print("Install with: pip install tkinterdnd2")
            print("Or use CLI mode: python merit_badge_generator.py --help")
            return 1
        except Exception as e:
            print(f"Error starting GUI: {e}")
            return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())